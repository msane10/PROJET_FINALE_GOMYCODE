# === PHASE 4 : Phase de laboratoire / Performance ===
# Objectif : L'objectif de votre pr√©sentation doit √™tre de pr√©senter au public
# le concept de chatbots de traitement du langage naturel (NLP) avec NLTK pour la classification de texte.

# === CLASSBOT - INTERFACE UTILISATEUR ===

import streamlit as st
import joblib
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem.snowball import FrenchStemmer
import os
import requests

# ‚õ≥ DOIT √äTRE TOUT EN HAUT juste apr√®s les imports
st.set_page_config(page_title="ClassBot", page_icon="ü§ñ")

# Configuration NLP
nltk.download('stopwords')
stop_words = list(stopwords.words('french'))
stemmer = FrenchStemmer()

def clean_text(text):
    text = text.lower()
    text = re.sub(r"[^a-z√†√¢√ß√©√®√™√´√Æ√Ø√¥√ª√π√º√ø√±√¶≈ì0-9\s'?-]", "", text)
    tokens = text.split()
    tokens = [word for word in tokens if word not in stop_words and len(word) > 2]
    return " ".join(tokens)

# T√©l√©chargement des mod√®les depuis GitHub si n√©cessaire
def download_model_from_github():
    # Liste des fichiers √† t√©l√©charger
    files = [
        ("model.pkl", "https://github.com/msane10/PROJET_FINALE_GOMYCODE/raw/main/model.pkl"),
        ("vectorizer.pkl", "https://github.com/msane10/PROJET_FINALE_GOMYCODE/raw/main/vectorizer.pkl"),
        ("label_encoder.pkl", "https://github.com/msane10/PROJET_FINALE_GOMYCODE/raw/main/label_encoder.pkl")
    ]
    
    # T√©l√©charger chaque fichier
    for filename, url in files:
        if not os.path.exists(filename):  # V√©rifie si le fichier existe d√©j√†
            print(f"T√©l√©chargement de {filename} depuis GitHub...")
            response = requests.get(url)
            with open(filename, "wb") as file:
                file.write(response.content)
            print(f"{filename} t√©l√©charg√© avec succ√®s.")
        else:
            print(f"{filename} existe d√©j√†.")

# Appel de la fonction pour t√©l√©charger les mod√®les
download_model_from_github()

@st.cache_resource
def load_assets():
    return (
        joblib.load("model.pkl"),
        joblib.load("vectorizer.pkl"),
        joblib.load("label_encoder.pkl")
    )

# D√©tection de mots-cl√©s
shipping_keywords = [
    "livraison", "colis", "exp√©dition", "livreur", "relais", "suivi", "retard", "commande",
    "tri", "d√©lais", "r√©ception", "transport", "point relais", "envoi", "douane", "r√©exp√©dition"
]

billing_keywords = [
    "facture", "paiement", "remboursement", "carte", "prix", "montant", "tva", "r√©duction",
    "code promo", "frais", "pr√©l√®vement", "solde", "re√ßu", "mode de paiement", "√©ch√©ance",
    "proforma", "annulation", "transaction", "historique de paiement"
]

support_keywords = [
    "compte", "application", "connexion", "mot de passe", "bug", "erreur", "support technique",
    "profil", "interface", "authentification", "sms", "email", "notifications", "acc√®s",
    "d√©connexion", "mobile", "mise √† jour", "biom√©trie", "langue", "suppression", "param√®tres"
]

hors_sujet_keywords = [
    "capital", "recette", "m√©t√©o", "psychologue", "m√©decin", "piano", "voiture", "sport", "restaurant",
    "h√¥tel", "film", "concert", "vaccin", "wifi", "notaire", "banque", "podcast", "voyage", "nutrition", "maladie",
    "sympt√¥mes", "g√¢teau", "tarte", "temps", "distance", "terre", "lune", "livre", "film", "s√©rie"
]

def get_category_response(user_input, model, vectorizer, encoder):
    cleaned = clean_text(user_input)
    vect = vectorizer.transform([cleaned])
    probas = model.predict_proba(vect)[0]
    pred_class = model.predict(vect)[0]
    confidence = max(probas)
    category = encoder.inverse_transform([pred_class])[0]

    lower_input = user_input.lower()
    if confidence < 0.5:
        if any(word in lower_input for word in shipping_keywords):
            return "exp√©dition", 0.7
        elif any(word in lower_input for word in billing_keywords):
            return "facturation", 0.7
        elif any(word in lower_input for word in support_keywords):
            return "assistance", 0.7
        elif any(word in lower_input for word in hors_sujet_keywords):
            return "hors_sujet", 0.95

    return category, confidence

def main():
    model, vectorizer, encoder = load_assets()

    st.title("ü§ñ ClassBot : Chatbot Intelligent pour la Classification Automatique des Requ√™tes Clients")
    st.markdown("""
    **Classifiez automatiquement vos requ√™tes clients en 3 cat√©gories :**
    - üì¶ Exp√©dition
    - üí≥ Facturation
    - üõ†Ô∏è Assistance
    """)

    user_input = st.text_area("üí¨ √âcrivez votre requ√™te ici :", height=100)

    if st.button("‚ú® Analyser la requ√™te", type="primary"):
        if user_input:
            category, confidence = get_category_response(user_input, model, vectorizer, encoder)

            threshold = 0.5
            if len(user_input.split()) < 3:
                threshold = 0.6

            if category == "hors_sujet":
                st.error("""
                ‚ùó Nous n'avons pas pu identifier clairement votre demande.

                Ce chatbot est con√ßu pour vous aider avec :
                - üì¶ Livraison / Exp√©dition
                - üí≥ Facturation / Paiement
                - üõ†Ô∏è Assistance technique

                Veuillez reformuler votre demande en utilisant des termes plus sp√©cifiques.
                """)
            elif confidence < threshold:
                st.error("""
                ‚ùó Nous n'avons pas pu identifier clairement votre demande.

                Voici des exemples de requ√™tes que nous traitons :
                - "Mon colis n'est pas arriv√©" (Exp√©dition)
                - "Ma facture contient une erreur" (Facturation)
                - "Je n'arrive pas √† me connecter" (Assistance)

                Veuillez reformuler votre demande en utilisant des termes plus sp√©cifiques.
                """)
            else:
                if category == "exp√©dition":
                    st.success("üì¶ **Service Exp√©dition**")
                    st.write("""
                    Notre √©quipe logistique va traiter votre requ√™te concernant :
                    - Suivi de colis
                    - Retards de livraison
                    - Probl√®mes d'adresse
                    - Retour de marchandise
                    """)
                elif category == "facturation":
                    st.success("üí≥ **Service Facturation**")
                    st.write("""
                    Notre service financier peut vous aider pour :
                    - Factures et re√ßus
                    - Remboursements
                    - Paiements en ligne
                    - Questions de TVA
                    """)
                elif category == "assistance":
                    st.success("üõ†Ô∏è **Service Assistance**")
                    st.write("""
                    Notre √©quipe support peut vous aider pour :
                    - Probl√®mes de compte
                    - Bugs d'application
                    - Connexion et s√©curit√©
                    - Mise √† jour des informations
                    """)
        else:
            st.warning("‚ö†Ô∏è Veuillez saisir une requ√™te √† analyser")

if __name__ == "__main__":
    main()
